; var bellabia = 'ùÑû‰∏â¬æ‰∏â‚ô©‰∏â‚ô©‰∏â‚ô¨‰∏â|‰∏â‚ô©‰∏â‚ô©‰∏â‚ô¨‰∏â‚Äñ'
; document.write(
    heading(format('Language Bases', 'u'), 3)
    + heading('Machine-based Language', 4)
    +      span('RMI', {c: 'hover', t: 'Raw Machine Instructions'}) + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is atomic tech.'
    + br + span('ASM', {c: 'hover', t: 'Assembly'}) + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is nano&nbsp;&nbsp;&nbsp;tech.'
    + br + link('C(++)', 'https://en.wikipedia.org/wiki/Duff%27s_device') + '&nbsp;&nbsp;&nbsp;is micro&nbsp;&nbsp;tech.'
    + br + 'Java&nbsp;&nbsp;&nbsp;&nbsp;is milli&nbsp;&nbsp;tech.'
    + br + link('Perl', 'https://en.wikipedia.org/wiki/Text_processing') + '&nbsp;&nbsp;&nbsp;&nbsp;is ' + link('high', 'http://search.cpan.org/~ingy/Inline-0.80/lib/Inline.pod') + '&nbsp;&nbsp;&nbsp;' + link('tech', 'https://metacpan.org/pod/Inline') + '.'
    + br + link('Haskell', 'https://en.wikipedia.org/wiki/Concurrency') + ' ' + link('is', 'https://en.wikipedia.org/wiki/Parallel') + ' ' + link('rocket', 'https://en.wikipedia.org/wiki/Neural_network_%28disambiguation%29') + ' ' + link('science', 'https://en.wikipedia.org/wiki/Multiprocessing') + ' ' + link('.', 'https://en.wikipedia.org/wiki/Distributed_computing')
    + br + link('Prolog', 'https://en.wikipedia.org/wiki/Automatic_programming') + '&nbsp;&nbsp;is ' + link('philosophical', 'https://en.wikipedia.org/wiki/Metaprogramming') + ' ' + link('sentience', 'https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29') + '.'
    + heading('Browser-based Language', 4)
    +      'Javascript is atomic tech; for the client-side of "-thing"s.'
    + br + 'LOLCODE/LOLScript is meme tech; for the server-side of "-thing"s &becaus; the Cybernet likes ' + link('cat', '/cat') + '.'
    + heading('Text-based Language', 4)
    +      '(La)TeX is a text processor; probably implemented by Perl...'
    + br + 'Perl&nbsp;&nbsp;&nbsp;&nbsp;is a text processing language; powered by RatExp...'
    + br + 'RegExp&nbsp;&nbsp;is a text processing language; making Perl a metalanguage...'
    + heading('Audio-based Language', 4)
    +      'iTeX ' + bellabia + ' will include audio processing capabilities..!'
    + br + 'Textual speech synthesis is already a thing...'
    + br + 'Textual music synthesis is already a thing...'
    + br + link('Graphical sound', 'https://en.wikipedia.org/wiki/Graphical_sound') + ' probably has been applied mathematically...'
    + br + link('Spatial music', 'https://en.wikipedia.org/wiki/Spatial_music') + ' is what I want; but in ' + link('higher dimensions', 'https://en.wikipedia.org/wiki/Sound_localization') + '...'
    + br + 'I do not understand what ' + link('JIT hacking', 'https://en.wikipedia.org/wiki/Live_coding') + ' has to do with noise...'
    + heading('Image-based Language', 4)
    +      'I like Sergei Lewis\'s and Joshua Schulter\'s well-ordered ' + link('Piet(-Q, ++)', 'http://www.dangermouse.net/esoteric/piet/samples.html') + ' style(&iquest;s?)...'
    + heading(format('Security', 'u'), 3)
    + heading('Functional ' + span('OTP', {c: 'hover', t: 'One Time Pad'}) + ' (AKA Functional Passwords)', 4)
    +      'y = f(x), graphically...'
    + br + 'Example: OTP initiates at y=0 in Quadrant I, and positively increasing...'
    + br + 'Obviously initiating at x=0 is more logical...'
    + br + 'Non-negative is unsigned, otherwise signed...'
    + br + 'Geometric/spiral/orbital/wave/whatever equations...'
    + br + 'Numerical ' + link('sequences', 'https://oeis.org/') + '...'
    + br + '(...use the ' + link('OEIS.ORG', 'https://oeis.org/') + ' database to crack numerical sequences!)'
    + br + 'Can just loop any kind of dysfunctional password...'
    + br + '(...use the fsource to crack dysfunctional passwords!)'
    + br + 'User-specified CAPalphanum3r1c4l base for enhanced security measures...'
    + br + 'User-specified x-axis character; or just use the @ symbol, as in @ x-coordinate...'
    + br + br + 'Indexable.otp files and filesystem format.'
    + heading('Functional Compression', 4)
    +      'Mathematical functions can also be used to describe data in a compressed format...'
    + br + 'f(x)|a&lt;x&lt;b'
    + br + br + 'Indexable.fun files and ' + link('filesystem format', 'https://en.wikipedia.org/wiki/List_of_Linux_distributions_that_run_from_RAM') + '.'
    + heading(format('Instructional Whispers', 'u'), 3)
    + heading('Logic: Vulcan vs ' + link('Jedi', 'https://en.wikipedia.org/wiki/Yoda_conditions'), 4)
    +      'Numerical logic must be ordered according to the number line; just as in the field of mathematics.'
    + br + 'Numerical logic is different from Yoda logic, not to be confused.'
    + br + format('Standard logic form:', 'b')
    + br + tab + 'grammatically logical; constant comparison variable'
    + br + tab + format('Yoda is green', 'i')
    + br + format('Yoda logic form:', 'b')
    + br + tab + 'grammatically illogical; variable comparison constant'
    + br + tab + format('green is Yoda', 'i')
    + br + format('Numerical logic form:', 'b')
    + br + tab + 'mathematically logical; well-ordered'
    + br + tab + format('(0.665m < Yoda) ‚àß (Yoda < 0.667m)', 'i')
    + br + 'Comparing constants and variables is different when considering numerical data, and should be approached mathematically.'
    + br
    + br + span('What languages support this?', {c: 'hover', t: 'All my languages will support logic chains and char‚àà{¬±,‚àì,+,‚àí,√ó,√∑,‚àö,!,=,‚â†,<,>,‚â§,‚â•,‚à®,‚àß,‚àû,‚Ñï,‚Ñ§,‚Ñù,..}'})
    + br + '-‚àû < -a ‚â§ -b ‚â§ -c ‚â§ ‚àì0 ‚â§ +x ‚â§ +y ‚â§ +z < +‚àû'
    + br + 'Traditions die hard!'
    + heading('Functional Pointing', 4)
    +      format('Efficiency: with function pointers', 'u')
    + br + '; if(condition) {; f = a()} else {; f = b()}'
    + br + '; loop(logic) {; f()}'
    + br
    + br + format('Inefficiency: without function pointers', 'u')
    + br + '; loop(logic) {; if(condition) {; a()} else {; b()}}'
    + br
    + br + format('It\'s redundant to repetitively compute "-thing"s; ' + format('if you can help it.', 'b'), 'i')
    + heading(format('Farraginous Concepts', 'u'), 3)
    + heading('Symbolic Communication', 4)
    +      '"n depends on d": d\\n y nxd, cÃÑ y‚àà{‚àß,‚à®} ‚àß x‚àà{/,%}'
    + br + '"n depends on d": d\\n x nyd, cÃÑ x‚àà{‚àß,‚à®} ‚àß y‚àà{/,%}'
    + br + '√∑ is ambiguous..?'
    + heading('Binary Stored DynamicaLanguage (AKA Decentralised Language)', 4)
    +      '‚óã-‚óã'
    + br + '|X|'
    + br + '‚óã-‚óã'
    + br
    + br + 'Dots and Lines; 2‚Å∂ to 2¬π‚Å∞ cÃÑ‚àÖ ' + hover('(accentuation)‚ÇÇ', 'accentuation√∑accentuation') + ', otherwise 2¬π‚Å∞ (StaticaLanguage)'
    + br + '{‚Üê,‚Üì,‚Üë,‚Üí,‚§¢,‚§°}+{‚Üô,‚Üò,‚Üó,‚Üñ}'
    + br + tab + '‚Üô√∑{‚Üê,‚Üì,‚§¢}'
    + br + tab + '‚Üò√∑{‚Üì,‚Üí,‚§°}'
    + br + tab + '‚Üó√∑{‚Üë,‚Üí,‚§¢}'
    + br + tab + '‚Üñ√∑{‚Üê,‚Üë,‚§°}'
    + br
    + br + format('What happened to my monospacial typesetting?', 'i')
    + br
    + br + "4 different clicks: two dots and a line (':|', '|:',..)"
    + br + link('https://youtu.be/31zzMb3U0iY', 'https://youtu.be/31zzMb3U0iY')
    + br + '!x: two side dots (the side indicates which side the tongue should be)'
    + br + '!c: two high dots (tip of the tongue)'
    + br + '!q: two low dots (is it floored, or does it pop of the ceiling? ...maybe swap with !c?)'
    + br
    + br + '3 different tones: one high dot, one low dot, and dotless (I guess SINGularity dots are vowels?)'
    + br + "5 different tones: low... '‚Üô', '‚Üò', ' ', '‚Üó', '‚Üñ' ...high"
    + br + "4 different tones: low... '‚Üô', '‚Üò', '‚Üó', '‚Üñ' ...high (SINGularity dots/dotless tones/contours, or @ vs go2)"
    + br
    + br + '4 different vowels: *angle with blank (dot or empty)'
    + br + '‚Üôu: |_\\'
    + br + '‚Üòo: |_'
    + br + '‚Üóa: |\\'
    + br + '‚Üñe: _\\'
    + br + 'u=o‚ààbook'
    + br + 'uu=...'
    + br + 'uuu=o'
    + br + 'o=o‚ààbody'
    + br + 'oo=...'
    + br + 'ooo=a'
    + br + 'a=u‚ààhut'
    + br + 'aa=a‚ààapple'
    + br + 'aaa=e'
    + br + 'e=e‚ààerror'
    + br + 'ee=e‚ààleer'
    + br + 'eee=i‚ààis'
    + br + 'eye=ae‚à®ai‚à®aye‚â†ay???'
    + br + '...'
    + br + 'uoae=why'
    + br + 'uo,ua,ue=w (oh, it double-u!..)'
    + br + 'ea,eo,eu=y (this can just be double-e so..?)'
    + br + '...'
    + br + '4 different vowels: triangles (right angle follows the arrows at the top of the block)'
    + br + 'blank is singular, dot is double; triple is redundant cÃÑ an exception'
    + br
    + br + 'CONSTANTS'
    + br + 'bp,dt,kg,sz,wy,vf,bvfw,rdt,jyr,..hlmn'
    + br + 'bitonals...'
    + br + '   p=^b'
    + br + '   b=_p'
    + br + '   d=_t'
    + br + '   t=^d'
    + br + 'redundancy...'
    + br + '   c‚àà{s,k}...ch! (sh...tsh...tshh)'
    + br + '   q‚àà{kw,ky}'
    + br + '   x‚àà{ks,kz}'
    + br + 'where g=j?'
)

/*

declarations
~ var = dynamical
‚óº var = logical  declaration, var‚àà{0,1}, unless ¬¨binary ‚à® non-binary ‚à® anti-binary ‚à® counter-binary, if you will?..
‚Ñ§ var = integer  declaration
‚Ñï var = natural  declaration
‚Ñö var = rational declaration
‚Ñù var = ‚Ñùeal     declaration
‚ÑÇ var = complex  declaration
' var = char   literal
" var = string literal
‚àÖ var = dynamical array, synonyms(`~‚àÖ var`,`‚àÖ~ var`)
‚àÖ? var = array, ?‚àà{~,‚óº,‚Ñ§,‚Ñï,‚Ñö,‚Ñù,‚ÑÇ,',",‚àÖ,..}
?‚àÖ var = array, ?‚àà{~,‚óº,‚Ñ§,‚Ñï,‚Ñö,‚Ñù,‚ÑÇ,',",‚àÖ,..}
?¬¨ var = null-terminated variable, ?‚àà{"}, "¬¨
?‚êÄ var = null-terminated variable, ?‚àà{"}, "‚êÄ
https://en.wikipedia.org/wiki/Data_type
https://en.wikipedia.org/wiki/Sigil_%28computer_programming%29
...numerical precision?
https://en.wikipedia.org/wiki/Primitive_data_type
https://en.wikipedia.org/wiki/Template:Data_types
https://en.wikipedia.org/wiki/Template:Floating-point
https://en.wikipedia.org/wiki/Null-terminated_string
https://en.wikipedia.org/wiki/Null_character
https://en.wikipedia.org/wiki/Control_character

mathematical operations
 |b|
 ‚åàb‚åâ
 [b]
 ‚åäb‚åã
‚àë‚Ñ§
Œ£-‚Ñ§
a+b
a√ób
a^b
a‚Üëb
a‚Üë‚Üëb
a‚Üë‚Üë‚Üëb
a‚Üë‚Üë‚Üë‚Üëb
a‚Üë^?b, where ?‚àà‚Ñ§, as many hyperoperations as you want; but time is a factor!..
a!
a‚àíb
a√∑b
 ‚àöb
 ‚àõb
 ‚àúb
 ‚à´b
a‚Ä≤
a‚Ä≥
a‚Ä¥
a‚óå π, as many derivations as you want; but time is a factor..!
https://en.wikipedia.org/wiki/Prime_%28symbol%29
...
https://en.wikipedia.org/wiki/Logarithm
    would like log_n(x) as a function, where n is numerical
    but consistency is an issue..?
https://en.wikipedia.org/wiki/Modulo
https://en.wikipedia.org/wiki/Modulus
https://en.wikipedia.org/wiki/Template:Large_numbers

logic
{a,b}|a=b:...
{a,b}|a‚â§b:...
{a,b}|a‚â•b:.., this is frowned upon, but supported; for right-to-left languages
{a,b}|a<b:...
{a,b}|a>b:.., this is frowned upon, but supported; for right-to-left languages
{a,b}|a‚àßb:...
{a,b}|a‚à®b:...
{a,b}|a‚äïb:.., ‚à®exclusive
{a,b}|a‚Üíb:.., material implication
{a,b}|a‚â°b:.., equivalence, synonymous(`a=b`) ?
   b | ¬¨b:..‚óº
{a,b}|a‚â†b:.., this is preferable to ¬¨(a=b)
 a   |a‚àâ‚Ñï:...
 a   |a‚àà‚Ñù:...
 a   |‚Ñï‚àåa:...
 a   |‚Ñù‚àãa:...
 a   |[‚àì1):..‚àµ‚à¥‚óº
 a   |[¬±1):.., this is frowned upon, but supported; for right-to-left languages
 a   |(0,10]‚àßa‚àà‚Ñï:..‚óª..‚óº.., proposals:
    {a,b,c}|{(0,1),(0,1],[0,1]}‚àß‚àÄ{a,b,c}‚àà‚Ñï:...
    {a,b,c}|{(0,1),(0,1],[0,1]}‚àß(‚àÄx‚àà{a,b,c}:x‚àà‚Ñï):...
https://en.wikipedia.org/wiki/Boolean_algebra#Operations
https://en.wikipedia.org/wiki/Boolean_data_type
https://en.wikipedia.org/wiki/True_and_false_%28commands%29#Null_command
https://en.wikipedia.org/wiki/Non-English-based_programming_languages
https://en.wikipedia.org/wiki/Visual_programming_language
https://en.wikipedia.org/wiki/TeX
...not sure about `logic:` as an if statement, need to think about if,.,else
...shorthand?..stenography?..brachygraphy?..tachygraphy?..tachyons!

https://en.wikipedia.org/wiki/Assignment_%28computer_science%29#Notation
a:=b is an assignment

b:=['a','b','c']
^b=[0,1,2], where this equation is true
a^b = is a mathematical expression, which treats b as a $calar value; probably 3 in this instance

https://www.mathsisfun.com/definitions/index-power-.html
^var = indexed var, not the index of var ‚àµ that wouldn't make sense
#var = address of var, not the value of var ‚àµ that would make sense
https://en.wikipedia.org/wiki/Hash_symbol
https://en.wikipedia.org/wiki/Reference_%28computer_science%29
(# was @, but the lines line up...it is more logical this way)

https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29
https://en.wikipedia.org/wiki/Dereference_operator
https://en.wikipedia.org/wiki/At_sign
@var = var as an address; a pointer, if you will
https://en.wikipedia.org/wiki/Function_pointer
var:=#fun
@var()=fun()

https://en.wikipedia.org/wiki/Foreach_loop
‚àÄe‚àà^E‚ààS:cat>&1 E[e]
//js_equivalent
var S = [[1,2,3],['a','b','c']];
for(var E of S) {
    for(var e in E) {
        console.log(E[e]);
    }
}

http://shyam.id.au/awooga/post.js
‚àÄ each ‚àà {'Alarms'} ‚àâ table ‚àà rc
...needs further thought/considerations

https://en.wikipedia.org/wiki/Standard_streams
https://en.wikipedia.org/wiki/Printf_format_string
...need to figure this out (I do like perl/bash; to some extent, anyway)

https://en.wikipedia.org/wiki/Scope_%28computer_science%29
...

https://en.wikipedia.org/wiki/Comment_%28computer_programming%29
... ‚Üê why not use these?
    ... pause, I need to explain!\ncontinue ...
    !!! docstrings are important !!!
https://en.wikipedia.org/wiki/Docstring

https://en.wikipedia.org/wiki/Literate_programming
...read it, may be of interest.

*/
